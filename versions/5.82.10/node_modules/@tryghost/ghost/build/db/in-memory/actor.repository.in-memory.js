"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActorRepositoryInMemory = void 0;
const actor_entity_1 = require("../../core/activitypub/actor.entity");
const bson_objectid_1 = __importDefault(require("bson-objectid"));
const common_1 = require("@nestjs/common");
let ActorRepositoryInMemory = class ActorRepositoryInMemory {
    actors;
    domainEvents;
    constructor(settingsCache, domainEvents) {
        this.actors = [
            actor_entity_1.Actor.create({
                id: bson_objectid_1.default.createFromHexString('deadbeefdeadbeefdeadbeef'),
                username: 'index',
                publicKey: settingsCache.get('ghost_public_key'),
                privateKey: settingsCache.get('ghost_private_key'),
                outbox: []
            })
        ];
        this.domainEvents = domainEvents;
    }
    getOneByUsername(username) {
        return this.actors.find(actor => actor.username === username) || null;
    }
    getOneById(id) {
        return this.actors.find(actor => actor.id.equals(id)) || null;
    }
    async getOne(identifier) {
        if (identifier instanceof bson_objectid_1.default) {
            return this.getOneById(identifier);
        }
        else {
            return this.getOneByUsername(identifier);
        }
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    async save(actor) {
        if (!this.actors.includes(actor)) {
            this.actors.push(actor);
        }
        actor_entity_1.Actor.getActivitiesToSave(actor, ( /* activities */) => {
            // Persist activities
        });
        actor_entity_1.Actor.getEventsToDispatch(actor, (events) => {
            for (const event of events) {
                this.domainEvents.dispatch(event);
            }
        });
    }
};
exports.ActorRepositoryInMemory = ActorRepositoryInMemory;
exports.ActorRepositoryInMemory = ActorRepositoryInMemory = __decorate([
    __param(0, (0, common_1.Inject)('SettingsCache')),
    __param(1, (0, common_1.Inject)('DomainEvents')),
    __metadata("design:paramtypes", [Object, Object])
], ActorRepositoryInMemory);
//# sourceMappingURL=actor.repository.in-memory.js.map