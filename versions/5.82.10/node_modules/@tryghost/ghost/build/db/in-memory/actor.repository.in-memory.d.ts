import { Actor } from '../../core/activitypub/actor.entity';
import { ActorRepository } from '../../core/activitypub/actor.repository';
import ObjectID from 'bson-objectid';
import { SettingsCache } from '../../common/types/settings-cache.type';
interface DomainEvents {
    dispatch(event: unknown): void;
}
export declare class ActorRepositoryInMemory implements ActorRepository {
    actors: Actor[];
    private readonly domainEvents;
    constructor(settingsCache: SettingsCache, domainEvents: DomainEvents);
    private getOneByUsername;
    private getOneById;
    getOne(identifier: string | ObjectID): Promise<Actor | null>;
    save(actor: Actor): Promise<void>;
}
export {};
