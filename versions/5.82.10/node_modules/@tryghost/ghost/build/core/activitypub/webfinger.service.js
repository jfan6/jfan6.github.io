"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebFingerService = void 0;
const common_1 = require("@nestjs/common");
const accountResource = /acct:(\w+)@(\w+)/;
let WebFingerService = class WebFingerService {
    repository;
    url;
    constructor(repository, url) {
        this.repository = repository;
        this.url = url;
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    async getResource(resource, rel) {
        const match = resource.match(accountResource);
        if (!match) {
            throw new Error('Invalid Resource');
        }
        const username = match[1];
        const actor = await this.repository.getOne(username);
        if (!actor) {
            throw new Error('not found');
        }
        const result = {
            subject: resource,
            links: [
                {
                    rel: 'self',
                    type: 'application/activity+json',
                    href: actor.getJSONLD(this.url).id
                }
            ]
        };
        return result;
    }
};
exports.WebFingerService = WebFingerService;
exports.WebFingerService = WebFingerService = __decorate([
    __param(0, (0, common_1.Inject)('ActorRepository')),
    __param(1, (0, common_1.Inject)('ActivityPubBaseURL')),
    __metadata("design:paramtypes", [Object, URL])
], WebFingerService);
//# sourceMappingURL=webfinger.service.js.map