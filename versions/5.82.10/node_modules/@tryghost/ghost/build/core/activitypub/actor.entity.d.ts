/// <reference types="node" />
/// <reference types="node" />
import ObjectID from 'bson-objectid';
import { Entity } from '../../common/entity.base';
import { ActivityPub } from './types';
import { Activity } from './activity.object';
import { Article } from './article.object';
type ActorData = {
    username: string;
    publicKey: string;
    privateKey: string;
    outbox: Activity[];
};
type CreateActorData = ActorData & {
    id?: ObjectID;
};
export declare class Actor extends Entity<ActorData> {
    get username(): string;
    get outbox(): Activity[];
    sign(request: Request, baseUrl: URL): Promise<Request>;
    private activities;
    static getActivitiesToSave(actor: Actor, fn: (activities: Activity[]) => void): void;
    createArticle(article: Article): void;
    getJSONLD(url: URL): ActivityPub.Actor & ActivityPub.RootObject;
    static create(data: CreateActorData): Actor;
}
export {};
