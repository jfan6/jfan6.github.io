"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Actor = void 0;
const crypto_1 = __importDefault(require("crypto"));
const bson_objectid_1 = __importDefault(require("bson-objectid"));
const entity_base_1 = require("../../common/entity.base");
const activity_object_1 = require("./activity.object");
const activity_event_1 = require("./activity.event");
const http_signature_service_1 = require("./http-signature.service");
class Actor extends entity_base_1.Entity {
    get username() {
        return this.attr.username;
    }
    get outbox() {
        return this.attr.outbox;
    }
    async sign(request, baseUrl) {
        const keyId = new URL(this.getJSONLD(baseUrl).publicKey.id);
        const key = crypto_1.default.createPrivateKey(this.attr.privateKey);
        return http_signature_service_1.HTTPSignature.sign(request, keyId, key);
    }
    activities = [];
    static getActivitiesToSave(actor, fn) {
        const activities = actor.activities;
        actor.activities = [];
        fn(activities);
    }
    createArticle(article) {
        const activity = new activity_object_1.Activity({
            type: 'Create',
            actor: this,
            object: article
        });
        this.attr.outbox.push(activity);
        this.activities.push(activity);
        this.addEvent(activity_event_1.ActivityEvent.create(activity));
    }
    getJSONLD(url) {
        if (!url.href.endsWith('/')) {
            url.href += '/';
        }
        const id = this.id.toHexString();
        const actor = new URL(`actor/${id}`, url.href);
        const publicKey = new URL(`actor/${id}#main-key`, url.href);
        const inbox = new URL(`inbox/${id}`, url.href);
        const outbox = new URL(`outbox/${id}`, url.href);
        const following = new URL(`following/${id}`, url.href);
        const followers = new URL(`followers/${id}`, url.href);
        const featured = new URL(`featured/${id}`, url.href);
        return {
            '@context': [
                'https://www.w3.org/ns/activitystreams',
                'https://w3id.org/security/v1',
                {
                    featured: {
                        '@id': 'http://joinmastodon.org/ns#featured',
                        '@type': '@id'
                    }
                },
                {
                    discoverable: {
                        '@id': 'http://joinmastodon.org/ns#discoverable',
                        '@type': '@id'
                    }
                },
                {
                    manuallyApprovesFollowers: {
                        '@id': 'http://joinmastodon.org/ns#manuallyApprovesFollowers',
                        '@type': '@id'
                    }
                },
                {
                    schema: 'http://schema.org#',
                    PropertyValue: 'schema:PropertyValue',
                    value: 'schema:value'
                }
            ],
            type: 'Person',
            id: actor.href,
            name: 'Display Name', // Full name
            preferredUsername: this.username, // Username
            summary: 'The bio for the actor', // Bio
            url: actor.href, // Profile URL
            icon: '', // Avatar
            image: '', // Header image
            published: '1970-01-01T00:00:00Z', // When profile was created
            manuallyApprovesFollowers: false, // Locked account
            discoverable: true, // Shown in the profile directory
            attachment: [{
                    type: 'PropertyValue',
                    name: 'Website',
                    value: `<a href='${url.href}'>${url.hostname}</a>`
                }],
            // Collections
            following: following.href,
            followers: followers.href,
            inbox: inbox.href,
            outbox: outbox.href,
            featured: featured.href,
            publicKey: {
                id: publicKey.href,
                owner: actor.href,
                publicKeyPem: this.attr.publicKey
            }
        };
    }
    static create(data) {
        return new Actor({
            id: data.id instanceof bson_objectid_1.default ? data.id : undefined,
            username: data.username,
            publicKey: data.publicKey,
            privateKey: data.privateKey,
            outbox: data.outbox
        });
    }
}
exports.Actor = Actor;
//# sourceMappingURL=actor.entity.js.map